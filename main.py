import os
from telegram import (
    Update,
    InputMediaPhoto,
    InputMediaVideo,
    Bot,
    ParseMode,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = '@your_channel_username'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è
TITLE, CONTENT, MEDIA, CONFIRM = range(4)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_posts = {}

def start(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_posts[user_id] = {
        'title': None,
        'content': None,
        'media': [],
        'media_type': None
    }
    
    update.message.reply_text(
        "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∫—Ä—É—Ç–æ–π –ø–æ—Å—Ç!\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞:"
    )
    return TITLE

def title_received(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_posts[user_id]['title'] = update.message.text
    
    update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown-—Ä–∞–∑–º–µ—Ç–∫–∞ (*–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, [—Å—Å—ã–ª–∫–∞](https://example.com))"
    )
    return CONTENT

def content_received(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_posts[user_id]['content'] = update.message.text_markdown_v2
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_media')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
    ]
    
    update.message.reply_text(
        "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MEDIA

def media_received(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    post = user_posts[user_id]
    
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        post['media_type'] = 'photo'
    elif update.message.video:
        file_id = update.message.video.file_id
        post['media_type'] = 'video'
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
        return MEDIA
    
    post['media'].append(file_id)
    
    if len(post['media']) < 10:  # –õ–∏–º–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
        update.message.reply_text(
            "–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_media')],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
            ])
        )
    else:
        update.message.reply_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ (10)")
        return confirm_media(update, context)
    
    return MEDIA

def confirm_media(update: Update, context: CallbackContext) -> int:
    return show_preview(update, context)

def skip_media(update: Update, context: CallbackContext) -> int:
    return show_preview(update, context)

def show_preview(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    post = user_posts[user_id]
    
    preview_text = (
        f"*{post['title']}*\n\n"
        f"{post['content']}\n\n"
        f"–ú–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤: {len(post['media'])}"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data='publish')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
    ]
    
    if post['media']:
        media = []
        for i, file_id in enumerate(post['media']):
            if post['media_type'] == 'photo':
                media.append(InputMediaPhoto(file_id, caption=preview_text if i == 0 else None))
            else:
                media.append(InputMediaVideo(file_id, caption=preview_text if i == 0 else None))
        
        context.bot.send_media_group(
            chat_id=update.effective_chat.id,
            media=media
        )
    else:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=preview_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    update.callback_query.message.reply_text(
        "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CONFIRM

def publish_post(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    post = user_posts[user_id]
    
    try:
        if post['media']:
            media = []
            for i, file_id in enumerate(post['media']):
                caption = f"*{post['title']}*\n\n{post['content']}" if i == 0 else None
                if post['media_type'] == 'photo':
                    media.append(InputMediaPhoto(file_id, caption=caption, parse_mode=ParseMode.MARKDOWN_V2))
                else:
                    media.append(InputMediaVideo(file_id, caption=caption, parse_mode=ParseMode.MARKDOWN_V2))
            
            context.bot.send_media_group(
                chat_id=CHANNEL_ID,
                media=media
            )
        else:
            context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=f"*{post['title']}*\n\n{post['content']}",
                parse_mode=ParseMode.MARKDOWN_V2
            )
        
        update.callback_query.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        update.callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    del user_posts[user_id]
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    if user_id in user_posts:
        del user_posts[user_id]
    
    update.callback_query.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

def main() -> None:
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TITLE: [MessageHandler(Filters.text & ~Filters.command, title_received)],
            CONTENT: [MessageHandler(Filters.text & ~Filters.command, content_received)],
            MEDIA: [
                CallbackQueryHandler(skip_media, pattern='^skip_media$'),
                CallbackQueryHandler(confirm_media, pattern='^confirm_media$'),
                MessageHandler(Filters.photo | Filters.video, media_received)
            ],
            CONFIRM: [
                CallbackQueryHandler(publish_post, pattern='^publish$'),
                CallbackQueryHandler(start, pattern='^edit$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(CallbackQueryHandler(cancel, pattern='^cancel$'))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
